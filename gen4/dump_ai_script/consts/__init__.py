from .enums import *
from .types import *

COMMANDS = [
    Command('IfRandomLessThan',                [int, Label]),
    Command('IfRandomGreaterThan',             [int, Label]),
    Command('IfRandomEqualTo',                 [int, Label]),
    Command('IfRandomNotEqualTo',              [int, Label]),
    Command('AddToMoveScore',                  [SignedInt]),
    Command('IfHPPercentLessThan',             [Battler, int, Label]),
    Command('IfHPPercentGreaterThan',          [Battler, int, Label]),
    Command('IfHPPercentEqualTo',              [Battler, int, Label]),
    Command('IfHPPercentNotEqualTo',           [Battler, int, Label]),
    Command('IfStatus',                        [Battler, PokemonStatus, Label]),
    Command('IfNotStatus',                     [Battler, PokemonStatus, Label]),
    Command('IfVolatileStatus',                [Battler, PokemonVolatileStatus, Label]),
    Command('IfNotVolatileStatus',             [Battler, PokemonVolatileStatus, Label]),
    Command('IfMoveEffect',                    [Battler, MoveEffects, Label]),
    Command('IfNotMoveEffect',                 [Battler, MoveEffects, Label]),
    Command('IfSideCondition',                 [Battler, SideConditions, Label]),
    Command('IfNotSideCondition',              [Battler, SideConditions, Label]),
    Command('IfLoadedLessThan',                [LoadedVal, Label]),
    Command('IfLoadedGreaterThan',             [LoadedVal, Label]),
    Command('IfLoadedEqualTo',                 [LoadedVal, Label]),
    Command('IfLoadedNotEqualTo',              [LoadedVal, Label]),
    Command('IfLoadedMask',                    [LoadedVal, Label]),
    Command('IfLoadedNotMask',                 [LoadedVal, Label]),
    Command('IfMoveEqualTo',                   [Move, Label]),
    Command('IfMoveNotEqualTo',                [Move, Label]),
    Command('IfLoadedInTable',                 [Label, Label]),
    Command('IfLoadedNotInTable',              [Label, Label]),
    Command('IfAttackerHasDamagingMoves',      [Label]),
    Command('IfAttackerHasNoDamagingMoves',    [Label]),
    Command('LoadTurnCount',                   []),
    Command('LoadTypeFrom',                    [LoadTypeTarget]),
    Command('LoadMovePower',                   []),
    Command('FlagMoveDamageScore',             [bool]),
    Command('LoadBattlerPreviousMove',         [Battler]),
    Command('IfTempEqualTo',                   [LoadedVal, Label]),
    Command('IfTempNotEqualTo',                [LoadedVal, Label]),
    Command('IfSpeedCompareEqualTo',           [CompareSpeedResult, Label]),
    Command('IfSpeedCompareNotEqualTo',        [CompareSpeedResult, Label]),
    Command('CountAlivePartyBattlers',         [Battler]),
    Command('LoadCurrentMove',                 []),
    Command('LoadCurrentMoveEffect',           []),
    Command('LoadBattlerAbility',              [Battler]),
    Command('CalcMaxEffectiveness',            []),
    Command('IfMoveEffectivenessEquals',       [TypeEffectiveness, Label]),
    Command('IfPartyMemberStatus',             [Battler, PokemonStatus, Label]),
    Command('IfPartyMemberNotStatus',          [Battler, PokemonStatus, Label]),
    Command('LoadCurrentWeather',              []),
    Command('IfCurrentMoveEffectEqualTo',      [BattleEffect, Label]),
    Command('IfCurrentMoveEffectNotEqualTo',   [BattleEffect, Label]),
    Command('IfStatStageLessThan',             [Battler, BattleStat, int, Label]),
    Command('IfStatStageGreaterThan',          [Battler, BattleStat, int, Label]),
    Command('IfStatStageEqualTo',              [Battler, BattleStat, int, Label]),
    Command('IfStatStageNotEqualTo',           [Battler, BattleStat, int, Label]),
    Command('IfCurrentMoveKills',              [RollDamage, Label]),
    Command('IfCurrentMoveDoesNotKill',        [RollDamage, Label]),
    Command('IfMoveKnown',                     [Battler, Move, Label]),
    Command('IfMoveNotKnown',                  [Battler, Move, Label]),
    Command('IfMoveEffectKnown',               [Battler, BattleEffect, Label]),
    Command('IfMoveEffectNotKnown',            [Battler, BattleEffect, Label]),
    Command('IfBattlerUnderEffect',            [Battler, CheckEffect, Label]),
    Command('IfCurrentMoveMatchesEffect',      [CheckEffect, Label]),
    Command('Escape',                          []),
    Command('Dummy3E',                         [int]),
    Command('Dummy3F',                         []),
    Command('LoadHeldItem',                    [Battler]),
    Command('LoadHeldItemEffect',              [Battler]),
    Command('LoadGender',                      [Battler]),
    Command('LoadIsFirstTurnInBattle',         [Battler]),
    Command('LoadStockpileCount',              [Battler]),
    Command('LoadBattleType',                  []),
    Command('LoadRecycleItem',                 [Battler]),
    Command('LoadTypeOfLoadedMove',            []),
    Command('LoadPowerOfLoadedMove',           []),
    Command('LoadEffectOfLoadedMove',          []),
    Command('LoadProtectChain',                [Battler]),
    Command('PushAndGoTo',                     [Label]),
    Command('GoTo',                            [Label]),
    Command('PopOrEnd',                        []),
    Command('IfLevel',                         [CheckLevel, Label]),
    Command('IfTargetIsTaunted',               [Label]),
    Command('IfTargetIsNotTaunted',            [Label]),
    Command('IfTargetIsPartner',               [Label]),
    Command('FlagBattlerIsType',               [Battler, Type]),
    Command('CheckBattlerAbility',             [Battler, Ability]),
    Command('IfActivatedFlashFire',            [Battler, Label]),
    Command('IfHeldItemEqualTo',               [Battler, Item, Label]),
    Command('IfFieldConditionsMask',           [FieldConditions, Label]),
    Command('LoadSpikesLayers',                [SideConditions, Label]),
    Command('IfAnyPartyMemberIsWounded',       [Battler, Label]),
    Command('IfAnyPartyMemberUsedPP',          [Battler, Label]),
    Command('LoadFlingPower',                  [Battler]),
    Command('LoadCurrentMovePP',               []),
    Command('IfCanUseLastResort',              [Battler, Label]),
    Command('LoadCurrentMoveClass',            []),
    Command('LoadDefenderLastUsedMoveClass',   []),
    Command('LoadBattlerSpeedRank',            [Battler]),
    Command('LoadIsBattlerFirstTurn',          [Battler]),
    Command('IfPartyMemberDealsMoreDamage',    [RollDamage, Label]),
    Command('IfHasSuperEffectiveMove',         [Label]),
    Command('IfBattlerDealsMoreDamage',        [Battler, RollDamage, Label]),
    Command('SumPositiveStatStages',           [Battler]),
    Command('DiffStatStages',                  [Battler, BattleStat]),
    Command('IfBattlerHasHigherStat',          [Battler, BattleStat, Label]),
    Command('IfBattlerHasLowerStat',           [Battler, BattleStat, Label]),
    Command('IfBattlerHasEqualStat',           [Battler, BattleStat, Label]),
    Command('CheckIfHighestDamageWithPartner', [RollDamage]),
    Command('IfBattlerFainted',                [Battler, Label]),
    Command('IfBattlerNotFainted',             [Battler, Label]),
    Command('LoadAbility',                     [Battler]),
]

TYPE_LOADERS = {
    'LoadTurnCount':                   int,
    'LoadTypeFrom':                    Type,
    'LoadMovePower':                   int,
    'LoadBattlerPreviousMove':         Move,
    'LoadCurrentMove':                 Move,
    'LoadCurrentMoveEffect':           BattleEffect,
    'LoadBattlerAbility':              Ability,
    'LoadCurrentWeather':              AIWeather,
    'LoadHeldItem':                    Item,
    'LoadHeldItemEffect':              ItemHoldEffect,
    'LoadGender':                      Gender,
    'LoadIsFirstTurnInBattle':         bool,
    'LoadStockpileCount':              int,
    'LoadBattleType':                  BattleType,
    'LoadRecycleItem':                 Item,
    'LoadTypeOfLoadedMove':            Type,
    'LoadPowerOfLoadedMove':           int,
    'LoadEffectOfLoadedMove':          BattleEffect,
    'LoadProtectChain':                int,
    'LoadSpikesLayers':                int,
    'LoadFlingPower':                  int,
    'LoadCurrentMovePP':               int,
    'LoadCurrentMoveClass':            MoveClass,
    'LoadDefenderLastUsedMoveClass':   MoveClass,
    'LoadBattlerSpeedRank':            int,
    'LoadIsBattlerFirstTurn':          bool,
    'LoadAbility':                     Ability,
    'FlagMoveDamageScore':             AICompareResult,
    'CheckIfHighestDamageWithPartner': AICompareResult,
    'CheckBattlerAbility':             AIHaveResult,
    'CountAlivePartyBattlers':         int,
}
